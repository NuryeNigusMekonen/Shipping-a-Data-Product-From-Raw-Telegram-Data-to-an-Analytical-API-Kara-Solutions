version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: telegram_postgres
    restart: always
    environment:
      POSTGRES_DB: telegramdb
      POSTGRES_USER: telegramuser
      POSTGRES_PASSWORD: telegrampass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  scraper:
    build:
      context: .
      dockerfile: Dockerfile.scraper
    container_name: telegram_scraper
    command: python src/telegram_scraper.py
    env_file:
      - .env
    volumes:
      - ./telegram_scraper_session.session:/app/telegram_scraper_session.session
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://telegramuser:telegrampass@postgres:5432/telegramdb

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: telegram_api
    command: ./start.sh
    env_file:
      - .env
    volumes:
      - ./telegram_scraper_session.session:/app/telegram_scraper_session.session
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - scraper
      - postgres
    ports:
      - "8000:8000"
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://telegramuser:telegrampass@postgres:5432/telegramdb

  dbt:
    build:
      context: .
      dockerfile: dbt.Dockerfile
    container_name: dbt_transformer
    depends_on:
      - postgres
    env_file:
      - .env
    volumes:
      - ./telegram_dbt/telegram_project:/usr/app
      - ./telegram_dbt/.dbt:/root/.dbt
    working_dir: /usr/app
    command: ["dbt", "run"]

  load_to_postgres:
    build:
      context: .
      dockerfile: Dockerfile.load_to_postgres
    container_name: telegram_loader
    depends_on:
      - postgres
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./load_to_postgres.py:/app/load_to_postgres.py
      - ./.env:/app/.env
    working_dir: /app
    command: ["python", "load_to_postgres.py"]
    restart: "no"
    environment:
      DATABASE_URL: postgresql://telegramuser:telegrampass@postgres:5432/telegramdb

  yolo_detector:
    build:
      context: .
      dockerfile: Dockerfile.yolo
    container_name: yolo_detector
    volumes:
      - ./data:/app/data
      - ./run_yolo_on_images.py:/app/run_yolo_on_images.py
      - ./load_image_detections.py:/app/load_image_detections.py
    depends_on:
      - postgres
    working_dir: /app
    command: bash -c "python run_yolo_on_images.py && python load_image_detections.py"

  dagster:
    build:
      context: ./telegram_pipeline
      dockerfile: telegram_pipeline/Dockerfile
    container_name: dagster_ui
    volumes:
      - ./telegram_pipeline:/app
    working_dir: /app
    command: ["dagit", "-h", "0.0.0.0", "-p", "3000", "-w", "workspace.yaml"]
    ports:
      - "3000:3000"
  load_yolo_results:
    build:
      context: .
      dockerfile: Dockerfile.load_image_detections  # <-- Make sure this file exists and is not empty
    container_name: telegram_yolo_loader
    depends_on:
      - postgres
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./load_image_detections.py:/app/load_image_detections.py
      - ./.env:/app/.env
    working_dir: /app
    command: ["python3", "load_image_detections.py"]
    restart: "no"
    environment:
      DATABASE_URL: postgresql://telegramuser:telegrampass@postgres:5432/telegramdb

 
volumes:
  pgdata:
